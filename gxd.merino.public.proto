// Graph X Design - "Merino" Public API
//
// Version: 7.33-TRANSITIONAL
//
syntax = "proto3";

package gxd.merino.public;

// Time
//
// Timestamps which include seconds are in UTC.
message DateTime {
	uint32 year   = 1;  // Full 4 digits
	uint32 month  = 2;  // 1..12
	uint32 day    = 3;  // 1..31
	uint32 second = 4;  // 0..86401 (why 1? leap seconds...)
}

// Localisation
//
// Because fields are all optional in protobuf3, Text is functionally
// equivalent to the map<Language,string> we'd prefer if Protobuf allowed enums
// as keys, especially in JSON, although lowercased.  We still use Language
// where we can.

// ISO-639-1 alpha-2 code
enum Language {
	FR = 0;
	EN = 1;
}

message Text {
	string fr = 1;
	string en = 2;
}

// ISO-4217 alpha-3 code
enum Currency {
	CAD = 0;
	USD = 1;
	EUR = 2;
}

// ISO-3166-1 alpha-3 code
enum Country {
	CAN = 0;
	USA = 1;
	FRA = 2;
}

// ISO-3166-2 alpha-2 code without country prefix
enum State {
	AB = 1;
	AK = 16;
	AL = 17;
	AR = 18;
	AS = 19;
	AZ = 20;
	BC = 2;
	CA = 21;
	CO = 22;
	CT = 23;
	DC = 24;
	DE = 25;
	FL = 26;
	GA = 27;
	GU = 28;
	HI = 29;
	IA = 30;
	ID = 31;
	IL = 32;
	IN = 33;
	KS = 34;
	KY = 35;
	LA = 36;
	MA = 37;
	MB = 3;
	MD = 38;
	ME = 39;
	MI = 40;
	MN = 41;
	MO = 42;
	MP = 43;
	MS = 44;
	MT = 45;
	NB = 4;
	NC = 46;
	ND = 47;
	NE = 48;
	NH = 49;
	NJ = 50;
	NL = 5;
	NM = 51;
	NS = 6;
	NT = 7;
	NU = 8;
	NV = 52;
	NY = 53;
	OH = 54;
	OK = 55;
	ON = 9;
	OR = 56;
	PA = 57;
	PE = 10;
	PM = 73;
	PR = 58;
	QC = 0;
	RI = 59;
	SC = 60;
	SD = 61;
	SK = 11;
	TN = 62;
	TX = 63;
	UM = 64;
	UT = 65;
	VA = 66;
	VI = 67;
	VT = 68;
	WA = 69;
	WI = 70;
	WV = 71;
	WY = 72;
	YT = 12;
	// Next: 74
}

message Amount {
	sint32   mills    = 1;  // 1/10 of a currency's smallest unit (i.e. 1/1000 of 1$, 1/10 of 1 cent)
	Currency currency = 2;  // If omitted, defaults to the current user's setting found in ProfileResponse.contact.currency
}

enum PayType {
	NONE           = 0;
	PURCHASE_ORDER = 1;
	ACCOUNT        = 2;
	CREDIT_CARD    = 3;
	CHECK          = 4;
}


// General
//

message Contact {
	string          email    = 1;
	Currency        currency = 2;
	Language        language = 3;
	Text            name     = 4;
	Text            company  = 5;
	repeated string street   = 6;
	string          city     = 7;
	State           state    = 8;
	Country         country  = 9;
	string          zip      = 10;
	string          phone    = 11;
	string          fax      = 12;
	string          url      = 13;
}

// Shipping rates
//
// Each rate should contain EITHER a state or a zip_range:
//
// * Zip/postal code range has priority.  For example, if a zip_range is
//   specified for beginning "H3C" and end "H3N", this implies that code
//   "H3F 3P3" would match regardless if a matching state rate also exists.
//
// * If the zip/postal code of interest is not found by code range, match by
//   state/province instead.
//
// Orders are charged a base fee plus the rate for any excess beyond the user's
// allocation:
//
//    base_fee + (excess_rate * max(0, total_weight - Profile.base_weight) / 1000)
//
message ShippingRate {
	Country         country     = 1;
	State           state       = 2;
	repeated string zip_range   = 5;  // Beginning and end of range (i.e. ["H3C", "H3N"])
	Amount          base_fee    = 3;  // Minimum shipping fee
	Amount          excess_rate = 4;  // Additional fee PER POUND of weight exceeding Profile.base_weight
}

// Fulfillment RPC
message FulfillmentRequest {}
message FulfillmentResponse {
	repeated Contact      contacts       = 1;  // Our supply-side addresses
	repeated ShippingRate shipping_rates = 2;  // This field is omitted/empty for realms without distinct shipping fees
}

// Profile RPC: introspection about the currently authenticated user
message ProfileRequest {}
message ProfileResponse {
	Contact          contact     = 1;
	repeated PayType pay_types   = 2;  // Allowed for this account
	uint32           base_weight = 3;  // Weight included in ShippingRate.base_fee for this user, in 1/1000 of a pound
	Amount           order_floor = 4;  // Minimum subtotal to accept a new order
	Amount           order_min   = 5;  // Minimum subtotal to avoid small order surcharge
	Amount           order_fee   = 6;  // Surcharge for orders with subtotal < order_min
}


// Products
//

message ProductColor {
	string id   = 1;  // Redundant in map context
	uint32 rgb  = 2;  // 24-bit RGB value, in hexadecimal
	Text   name = 3;
}
message ProductSize {
	string id   = 1;  // Redundant in map context
	Text   name = 2;
}

message Subproduct {
	string             eid       = 1;   // Extended ID (up to 30 chars)
	string             cid       = 11;  // Compact ID (8 chars)
	string             sku       = 101;  // XXX: DEPRECATED
	string             size_id   = 2;
	repeated string    color_ids = 3;  // Some products have pairs of colors
	map<uint32,Amount> prices    = 4;  // Minimum quantity -> unit price
}

message Product {
	string               eid            = 1;  // Extended ID (up to 15 chars)
	string               cid            = 21; // Compact ID (8 chars)
	string               sku            = 101;  // XXX: DEPRECATED
	Text                 name           = 2;
	Text                 description    = 3;
	Text                 notes          = 4;
	Text                 visual         = 5;  // Describes pre-branded products
	uint32               qty_minimum    = 6;
	uint32               qty_step       = 7;  // Usually 1, but some products are sold in groupings (i.e. dozens)
	uint32               weight         = 8;  // Unit: 1/1000 of a pound, for each individual product of any size
	repeated Subproduct  subproducts    = 9;
	repeated string      thumbnail_urls = 11;
	repeated string      photo_urls     = 12;
	repeated string      related_eids   = 13;  // Set if requested by EID
	repeated string      related_cids   = 23;  // Set if requested by CID
	repeated string      related_skus   = 113;  // XXX: DEPRECATED
	string               category       = 14;  // Short code for internal classification
	string               model          = 15;  // Corporate programs: short name of source product
}

// Product RPC
enum ProductIDType {
	UNSPECIFIED_PRODUCTIDTYPE = 0;
	EID = 1;
	CID = 2;
}
message ProductRequest {
	oneof _ProductRequest_oneof {
		// Return a list of all products by default, with minimal details: IDs, name, qty_minimim, qty_step, weight
		string        get       = 1;  // Return specific product by EID|CID|SKU, including subproducts and extended details
		ProductIDType stock     = 3;  // Return stock levels by EID or CID
		bool          inventory = 103;  // Return inventory by SKU (set to true) XXX: DEPRECATED
	}
}
message ProductResponse {
	// Only one of these will be set.  (Protobuf prevents repeated inside oneof.)
	Product             product  = 1;
	repeated Product    products = 2;
	map <string,uint32> stock    = 3;  // Subproduct EID|CID (as requested) -> quantity available
	map <string,uint32> inventory = 103;  // XXX: DEPRECATED

	// Useful information referenced in the above
	map <string,ProductSize>  sizes  = 6;
	map <string,ProductColor> colors = 7;
}


// Bids / Orders
//
// 1. User submits an OrderDraft
// 2. We return OrderConfirmations upon queueing, for your reference
// 3. type=ORDER starts fulfillment, type=BID awaits further communication

message OrderDraft {
	enum Type {
		INVOICE = 0;  // Reserved for future use
		ORDER   = 1;
		BID     = 3;
	}
	message Line {
		string eid = 1;
		string cid = 2;
		string sku = 101;  // XXX: DEPRECATED
		uint32 qty = 4;
	}
	repeated Line lines      = 1;
	string        directives = 2;
	Contact       contact    = 3;
	Type          type       = 4;  // Assumed ORDER unless specified as BID if you need to discuss prior to fulfillment
	PayType       pay_type   = 5;  // ACCOUNT is currently assumed, but you should still specify it
}

message OrderConfirmation {
	uint32   id        = 1;
	DateTime created   = 2;  // Official creation timestamp
	Amount   total     = 3;  // TEMPORARY grand total: our accounting system may slightly affect it
	DateTime ship_date = 4;  // Expected date of shipping (only for type=ORDER)
}

// Invoice RPC
message InvoiceRequest {
	oneof _InvoiceRequest_oneof {
		OrderDraft put_cart = 6;  // Name preserved for JSON backwards-compatibility
	}
}
message InvoiceResponse {
	repeated OrderConfirmation order_confirmations = 1;  // Some carts may be split into several orders
}


// Top-level RPC
//

message Request {
	uint64 magic = 1;  // Optional unique identifier for this request
	oneof _Request_oneof {
		ProfileRequest     profile_request     = 3;
		FulfillmentRequest fulfillment_request = 4;
		ProductRequest     product_request     = 5;
		InvoiceRequest     invoice_request     = 6;
	}
}

message Response {
	uint64 magic = 1;  // Your optional unique identifier echoed back so you may match our responses with your requests
	oneof _Response_oneof {
		string              error                = 2;  // Defined instead of your expected response below, on failure
		ProfileResponse     profile_response     = 3;
		FulfillmentResponse fulfillment_response = 4;
		ProductResponse     product_response     = 5;
		InvoiceResponse     invoice_response     = 6;
	}
}

message Message {
	string            security_token = 2;  // Mandatory, the API access token we provided you
	string            security_realm = 3;  // API access realm (usually userid or corporate program ID)
	repeated Request  requests       = 4;
	repeated Response responses      = 5;
	string            status         = 6;  // Protocol-level status or error message
}
